#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Defini√ß√£o da struct Item para representar cada item da mochila
struct Item {
    char nome[30];      // Nome do item (ex: "Faca", "Bandagem")
    char tipo[20];      // Tipo do item (ex: "arma", "muni√ß√£o", "cura")
    int quantidade;     // Quantidade dispon√≠vel do item
};

// Declara√ß√£o das fun√ß√µes
void inserirItem(struct Item mochila[], int *quantidadeItens);
void removerItem(struct Item mochila[], int *quantidadeItens);
void listarItens(struct Item mochila[], int quantidadeItens);
void buscarItem(struct Item mochila[], int quantidadeItens);
void limparBuffer();    // Fun√ß√£o auxiliar para limpar o buffer de entrada

int main() {
    // Vetor para armazenar at√© 10 itens na mochila
    struct Item mochila[10];
    int quantidadeItens = 0;  // Contador de itens atualmente na mochila
    int opcao;
    
    // Mensagem inicial do sistema
    printf("=== SISTEMA DE INVENT√ÅRIO - MOCHILA DE SOBREVIV√äNCIA ===\n");
    printf("Bem-vindo ao gerenciador de itens!\n\n");
    
    do {
        // Menu principal com op√ß√µes para o usu√°rio
        printf("\n=== MENU PRINCIPAL ===\n");
        printf("1. Inserir novo item\n");
        printf("2. Remover item\n");
        printf("3. Listar todos os itens\n");
        printf("4. Buscar item por nome\n");
        printf("5. Sair do sistema\n");
        printf("Escolha uma op√ß√£o (1-5): ");
        
        scanf("%d", &opcao);
        limparBuffer(); // Limpa o buffer ap√≥s leitura num√©rica
        
        printf("\n");
        
        // Switch case para processar a op√ß√£o escolhida
        switch(opcao) {
            case 1:
                inserirItem(mochila, &quantidadeItens);
                break;
            case 2:
                removerItem(mochila, &quantidadeItens);
                break;
            case 3:
                listarItens(mochila, quantidadeItens);
                break;
            case 4:
                buscarItem(mochila, quantidadeItens);
                break;
            case 5:
                printf("Saindo do sistema... At√© logo!\n");
                break;
            default:
                printf("Op√ß√£o inv√°lida! Por favor, escolha entre 1 e 5.\n");
        }
        
    } while(opcao != 5);
    
    return 0;
}

// Fun√ß√£o para inserir um novo item na mochila
void inserirItem(struct Item mochila[], int *quantidadeItens) {
    // Verifica se a mochila est√° cheia
    if (*quantidadeItens >= 10) {
        printf("‚ùå Mochila cheia! N√£o √© poss√≠vel adicionar mais itens.\n");
        printf("Itens atuais: %d/10\n", *quantidadeItens);
        return;
    }
    
    printf("‚ûï INSERIR NOVO ITEM\n");
    
    // Solicita e l√™ o nome do item
    printf("Digite o nome do item (m√°x. 30 caracteres): ");
    fgets(mochila[*quantidadeItens].nome, 30, stdin);
    mochila[*quantidadeItens].nome[strcspn(mochila[*quantidadeItens].nome, "\n")] = '\0'; // Remove o \n
    
    // Solicita e l√™ o tipo do item
    printf("Digite o tipo do item (ex: arma, municao, cura): ");
    fgets(mochila[*quantidadeItens].tipo, 20, stdin);
    mochila[*quantidadeItens].tipo[strcspn(mochila[*quantidadeItens].tipo, "\n")] = '\0'; // Remove o \n
    
    // Solicita e l√™ a quantidade do item
    printf("Digite a quantidade: ");
    while(scanf("%d", &mochila[*quantidadeItens].quantidade) != 1 || mochila[*quantidadeItens].quantidade <= 0) {
        printf("Quantidade inv√°lida! Digite um n√∫mero positivo: ");
        limparBuffer();
    }
    limparBuffer();
    
    // Confirma√ß√£o de sucesso
    printf("‚úÖ Item '%s' adicionado com sucesso!\n", mochila[*quantidadeItens].nome);
    
    // Incrementa o contador de itens
    (*quantidadeItens)++;
    
    // Lista todos os itens ap√≥s a inser√ß√£o
    listarItens(mochila, *quantidadeItens);
}

// Fun√ß√£o para remover um item da mochila
void removerItem(struct Item mochila[], int *quantidadeItens) {
    // Verifica se a mochila est√° vazia
    if (*quantidadeItens == 0) {
        printf("‚ùå Mochila vazia! N√£o h√° itens para remover.\n");
        return;
    }
    
    printf("‚ûñ REMOVER ITEM\n");
    
    char nomeBusca[30];
    printf("Digite o nome do item a ser removido: ");
    fgets(nomeBusca, 30, stdin);
    nomeBusca[strcspn(nomeBusca, "\n")] = '\0'; // Remove o \n
    
    int encontrado = 0;
    int posicao = -1;
    
    // Busca sequencial pelo item a ser removido
    for (int i = 0; i < *quantidadeItens; i++) {
        if (strcmp(mochila[i].nome, nomeBusca) == 0) {
            encontrado = 1;
            posicao = i;
            break;
        }
    }
    
    if (!encontrado) {
        printf("‚ùå Item '%s' n√£o encontrado na mochila.\n", nomeBusca);
        return;
    }
    
    // Remove o item deslocando os itens subsequentes
    printf("‚úÖ Item encontrado! Removendo '%s'...\n", mochila[posicao].nome);
    
    for (int i = posicao; i < *quantidadeItens - 1; i++) {
        mochila[i] = mochila[i + 1];
    }
    
    // Decrementa o contador de itens
    (*quantidadeItens)--;
    
    printf("‚úÖ Item removido com sucesso!\n");
    
    // Lista todos os itens ap√≥s a remo√ß√£o
    listarItens(mochila, *quantidadeItens);
}

// Fun√ß√£o para listar todos os itens da mochila
void listarItens(struct Item mochila[], int quantidadeItens) {
    printf("\nüìã LISTA DE ITENS NA MOCHILA (%d/10):\n", quantidadeItens);
    
    if (quantidadeItens == 0) {
        printf("A mochila est√° vazia.\n");
        return;
    }
    
    // Cabe√ßalho da tabela
    printf("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n");
    printf("‚îÇ%-30s‚îÇ%-20s‚îÇ%-12s‚îÇ\n", " NOME", " TIPO", " QUANTIDADE");
    printf("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n");
    
    // Lista cada item formatado
    for (int i = 0; i < quantidadeItens; i++) {
        printf("‚îÇ%-30s‚îÇ%-20s‚îÇ%-12d‚îÇ\n", 
               mochila[i].nome, mochila[i].tipo, mochila[i].quantidade);
    }
    
    // Rodap√© da tabela
    printf("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n");
}

// Fun√ß√£o de busca sequencial por nome
void buscarItem(struct Item mochila[], int quantidadeItens) {
    if (quantidadeItens == 0) {
        printf("‚ùå Mochila vazia! N√£o h√° itens para buscar.\n");
        return;
    }
    
    printf("üîç BUSCAR ITEM\n");
    
    char nomeBusca[30];
    printf("Digite o nome do item a ser buscado: ");
    fgets(nomeBusca, 30, stdin);
    nomeBusca[strcspn(nomeBusca, "\n")] = '\0'; // Remove o \n
    
    int encontrado = 0;
    
    // Busca sequencial pelo item
    for (int i = 0; i < quantidadeItens; i++) {
        if (strcmp(mochila[i].nome, nomeBusca) == 0) {
            printf("\n‚úÖ Item encontrado!\n");
            printf("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n");
            printf("‚îÇ Nome: %-23s ‚îÇ\n", mochila[i].nome);
            printf("‚îÇ Tipo: %-23s ‚îÇ\n", mochila[i].tipo);
            printf("‚îÇ Quantidade: %-16d ‚îÇ\n", mochila[i].quantidade);
            printf("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n");
            encontrado = 1;
            break;
        }
    }
    
    if (!encontrado) {
        printf("‚ùå Item '%s' n√£o encontrado na mochila.\n", nomeBusca);
    }
}

// Fun√ß√£o auxiliar para limpar o buffer de entrada
void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}
